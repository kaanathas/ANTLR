// Generated from grammars/ECMAScript.g4 by ANTLR 4.9.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ECMAScriptListener from './ECMAScriptListener.js';
import ECMAScriptVisitor from './ECMAScriptVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003j\u0272\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0003",
    "\u0002\u0005\u0002r\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0006",
    "\u0003w\n\u0003\r\u0003\u000e\u0003x\u0003\u0004\u0003\u0004\u0005\u0004",
    "}\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u008e\n",
    "\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u0092\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0006\u0007\u0097\n\u0007\r\u0007\u000e\u0007",
    "\u0098\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u00a2\n\t\f\t\u000e\t\u00a5\u000b\t\u0003\n\u0003\n\u0005\n\u00a9",
    "\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u00b9\n\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u00cc\n\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u00d0\n\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u00d4\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u00de",
    "\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u00e2\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u00f8\n\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u00fd\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0104\n\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u010b\n\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u011d\n",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0121\n\u0015\u0005\u0015",
    "\u0123\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0006\u0016\u0128",
    "\n\u0016\r\u0016\u000e\u0016\u0129\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0130\n\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u0135\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u014d\n\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u015f\n\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0007 \u0169",
    "\n \f \u000e \u016c\u000b \u0003!\u0005!\u016f\n!\u0003\"\u0003\"\u0005",
    "\"\u0173\n\"\u0003\"\u0005\"\u0176\n\"\u0003\"\u0005\"\u0179\n\"\u0003",
    "\"\u0003\"\u0003#\u0005#\u017e\n#\u0003#\u0003#\u0003#\u0005#\u0183",
    "\n#\u0003#\u0007#\u0186\n#\f#\u000e#\u0189\u000b#\u0003$\u0006$\u018c",
    "\n$\r$\u000e$\u018d\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0195",
    "\n%\u0003%\u0003%\u0005%\u0199\n%\u0003&\u0003&\u0003&\u0007&\u019e",
    "\n&\f&\u000e&\u01a1\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u01b6\n\'\u0003(\u0003(\u0003",
    "(\u0005(\u01bb\n(\u0003)\u0003)\u0003*\u0003*\u0005*\u01c1\n*\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0007+\u01c8\n+\f+\u000e+\u01cb\u000b",
    "+\u0003,\u0003,\u0003,\u0007,\u01d0\n,\f,\u000e,\u01d3\u000b,\u0003",
    "-\u0003-\u0003-\u0005-\u01d8\n-\u0003-\u0003-\u0005-\u01dc\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u01e6\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0205",
    "\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0248\n-\f-\u000e-\u024b",
    "\u000b-\u0003.\u0003.\u0003/\u0003/\u0005/\u0251\n/\u00030\u00030\u0003",
    "1\u00031\u00051\u0257\n1\u00032\u00032\u00032\u00052\u025c\n2\u0003",
    "3\u00033\u00034\u00034\u00035\u00035\u00035\u00035\u00036\u00036\u0003",
    "6\u00036\u00037\u00037\u00037\u00037\u00057\u026e\n7\u00038\u00038\u0003",
    "8\u0002\u0003X9\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjln\u0002",
    "\r\u0003\u0002\u0017\u0019\u0003\u0002\u0013\u0014\u0003\u0002\u001a",
    "\u001c\u0003\u0002\u001d \u0003\u0002!$\u0003\u0002*4\u0005\u0002\u0003",
    "\u000356ff\u0003\u000279\u0003\u000256\u0003\u0002:S\u0003\u0002Ud\u0002",
    "\u02a8\u0002q\u0003\u0002\u0002\u0002\u0004v\u0003\u0002\u0002\u0002",
    "\u0006|\u0003\u0002\u0002\u0002\b\u008d\u0003\u0002\u0002\u0002\n\u008f",
    "\u0003\u0002\u0002\u0002\f\u0096\u0003\u0002\u0002\u0002\u000e\u009a",
    "\u0003\u0002\u0002\u0002\u0010\u009e\u0003\u0002\u0002\u0002\u0012\u00a6",
    "\u0003\u0002\u0002\u0002\u0014\u00aa\u0003\u0002\u0002\u0002\u0016\u00ad",
    "\u0003\u0002\u0002\u0002\u0018\u00af\u0003\u0002\u0002\u0002\u001a\u00b1",
    "\u0003\u0002\u0002\u0002\u001c\u00f7\u0003\u0002\u0002\u0002\u001e\u00f9",
    "\u0003\u0002\u0002\u0002 \u0100\u0003\u0002\u0002\u0002\"\u0107\u0003",
    "\u0002\u0002\u0002$\u010e\u0003\u0002\u0002\u0002&\u0114\u0003\u0002",
    "\u0002\u0002(\u011a\u0003\u0002\u0002\u0002*\u0127\u0003\u0002\u0002",
    "\u0002,\u012b\u0003\u0002\u0002\u0002.\u0131\u0003\u0002\u0002\u0002",
    "0\u0136\u0003\u0002\u0002\u00022\u013a\u0003\u0002\u0002\u00024\u014c",
    "\u0003\u0002\u0002\u00026\u014e\u0003\u0002\u0002\u00028\u0154\u0003",
    "\u0002\u0002\u0002:\u0157\u0003\u0002\u0002\u0002<\u015a\u0003\u0002",
    "\u0002\u0002>\u0165\u0003\u0002\u0002\u0002@\u016e\u0003\u0002\u0002",
    "\u0002B\u0170\u0003\u0002\u0002\u0002D\u017d\u0003\u0002\u0002\u0002",
    "F\u018b\u0003\u0002\u0002\u0002H\u0198\u0003\u0002\u0002\u0002J\u019a",
    "\u0003\u0002\u0002\u0002L\u01b5\u0003\u0002\u0002\u0002N\u01ba\u0003",
    "\u0002\u0002\u0002P\u01bc\u0003\u0002\u0002\u0002R\u01be\u0003\u0002",
    "\u0002\u0002T\u01c4\u0003\u0002\u0002\u0002V\u01cc\u0003\u0002\u0002",
    "\u0002X\u0204\u0003\u0002\u0002\u0002Z\u024c\u0003\u0002\u0002\u0002",
    "\\\u0250\u0003\u0002\u0002\u0002^\u0252\u0003\u0002\u0002\u0002`\u0256",
    "\u0003\u0002\u0002\u0002b\u025b\u0003\u0002\u0002\u0002d\u025d\u0003",
    "\u0002\u0002\u0002f\u025f\u0003\u0002\u0002\u0002h\u0261\u0003\u0002",
    "\u0002\u0002j\u0265\u0003\u0002\u0002\u0002l\u026d\u0003\u0002\u0002",
    "\u0002n\u026f\u0003\u0002\u0002\u0002pr\u0005\u0004\u0003\u0002qp\u0003",
    "\u0002\u0002\u0002qr\u0003\u0002\u0002\u0002rs\u0003\u0002\u0002\u0002",
    "st\u0007\u0002\u0002\u0003t\u0003\u0003\u0002\u0002\u0002uw\u0005\u0006",
    "\u0004\u0002vu\u0003\u0002\u0002\u0002wx\u0003\u0002\u0002\u0002xv\u0003",
    "\u0002\u0002\u0002xy\u0003\u0002\u0002\u0002y\u0005\u0003\u0002\u0002",
    "\u0002z}\u0005\b\u0005\u0002{}\u0005<\u001f\u0002|z\u0003\u0002\u0002",
    "\u0002|{\u0003\u0002\u0002\u0002}\u0007\u0003\u0002\u0002\u0002~\u008e",
    "\u0005\n\u0006\u0002\u007f\u008e\u0005\u000e\b\u0002\u0080\u008e\u0005",
    "\u0016\f\u0002\u0081\u008e\u0005\u0018\r\u0002\u0082\u008e\u0005\u001a",
    "\u000e\u0002\u0083\u008e\u0005\u001c\u000f\u0002\u0084\u008e\u0005\u001e",
    "\u0010\u0002\u0085\u008e\u0005 \u0011\u0002\u0086\u008e\u0005\"\u0012",
    "\u0002\u0087\u008e\u0005$\u0013\u0002\u0088\u008e\u00050\u0019\u0002",
    "\u0089\u008e\u0005&\u0014\u0002\u008a\u008e\u00052\u001a\u0002\u008b",
    "\u008e\u00054\u001b\u0002\u008c\u008e\u0005:\u001e\u0002\u008d~\u0003",
    "\u0002\u0002\u0002\u008d\u007f\u0003\u0002\u0002\u0002\u008d\u0080\u0003",
    "\u0002\u0002\u0002\u008d\u0081\u0003\u0002\u0002\u0002\u008d\u0082\u0003",
    "\u0002\u0002\u0002\u008d\u0083\u0003\u0002\u0002\u0002\u008d\u0084\u0003",
    "\u0002\u0002\u0002\u008d\u0085\u0003\u0002\u0002\u0002\u008d\u0086\u0003",
    "\u0002\u0002\u0002\u008d\u0087\u0003\u0002\u0002\u0002\u008d\u0088\u0003",
    "\u0002\u0002\u0002\u008d\u0089\u0003\u0002\u0002\u0002\u008d\u008a\u0003",
    "\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002\u0002\u008d\u008c\u0003",
    "\u0002\u0002\u0002\u008e\t\u0003\u0002\u0002\u0002\u008f\u0091\u0007",
    "\t\u0002\u0002\u0090\u0092\u0005\f\u0007\u0002\u0091\u0090\u0003\u0002",
    "\u0002\u0002\u0091\u0092\u0003\u0002\u0002\u0002\u0092\u0093\u0003\u0002",
    "\u0002\u0002\u0093\u0094\u0007\n\u0002\u0002\u0094\u000b\u0003\u0002",
    "\u0002\u0002\u0095\u0097\u0005\b\u0005\u0002\u0096\u0095\u0003\u0002",
    "\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u0096\u0003\u0002",
    "\u0002\u0002\u0098\u0099\u0003\u0002\u0002\u0002\u0099\r\u0003\u0002",
    "\u0002\u0002\u009a\u009b\u0007A\u0002\u0002\u009b\u009c\u0005\u0010",
    "\t\u0002\u009c\u009d\u0005l7\u0002\u009d\u000f\u0003\u0002\u0002\u0002",
    "\u009e\u00a3\u0005\u0012\n\u0002\u009f\u00a0\u0007\f\u0002\u0002\u00a0",
    "\u00a2\u0005\u0012\n\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a2",
    "\u00a5\u0003\u0002\u0002\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a3",
    "\u00a4\u0003\u0002\u0002\u0002\u00a4\u0011\u0003\u0002\u0002\u0002\u00a5",
    "\u00a3\u0003\u0002\u0002\u0002\u00a6\u00a8\u0007e\u0002\u0002\u00a7",
    "\u00a9\u0005\u0014\u000b\u0002\u00a8\u00a7\u0003\u0002\u0002\u0002\u00a8",
    "\u00a9\u0003\u0002\u0002\u0002\u00a9\u0013\u0003\u0002\u0002\u0002\u00aa",
    "\u00ab\u0007\r\u0002\u0002\u00ab\u00ac\u0005X-\u0002\u00ac\u0015\u0003",
    "\u0002\u0002\u0002\u00ad\u00ae\u0007\u000b\u0002\u0002\u00ae\u0017\u0003",
    "\u0002\u0002\u0002\u00af\u00b0\u0005V,\u0002\u00b0\u0019\u0003\u0002",
    "\u0002\u0002\u00b1\u00b2\u0007O\u0002\u0002\u00b2\u00b3\u0007\u0007",
    "\u0002\u0002\u00b3\u00b4\u0005V,\u0002\u00b4\u00b5\u0007\b\u0002\u0002",
    "\u00b5\u00b8\u0005\b\u0005\u0002\u00b6\u00b7\u0007?\u0002\u0002\u00b7",
    "\u00b9\u0005\b\u0005\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b8",
    "\u00b9\u0003\u0002\u0002\u0002\u00b9\u001b\u0003\u0002\u0002\u0002\u00ba",
    "\u00bb\u0007;\u0002\u0002\u00bb\u00bc\u0005\b\u0005\u0002\u00bc\u00bd",
    "\u0007I\u0002\u0002\u00bd\u00be\u0007\u0007\u0002\u0002\u00be\u00bf",
    "\u0005V,\u0002\u00bf\u00c0\u0007\b\u0002\u0002\u00c0\u00c1\u0005l7\u0002",
    "\u00c1\u00f8\u0003\u0002\u0002\u0002\u00c2\u00c3\u0007I\u0002\u0002",
    "\u00c3\u00c4\u0007\u0007\u0002\u0002\u00c4\u00c5\u0005V,\u0002\u00c5",
    "\u00c6\u0007\b\u0002\u0002\u00c6\u00c7\u0005\b\u0005\u0002\u00c7\u00f8",
    "\u0003\u0002\u0002\u0002\u00c8\u00c9\u0007G\u0002\u0002\u00c9\u00cb",
    "\u0007\u0007\u0002\u0002\u00ca\u00cc\u0005V,\u0002\u00cb\u00ca\u0003",
    "\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\u00cd\u0003",
    "\u0002\u0002\u0002\u00cd\u00cf\u0007\u000b\u0002\u0002\u00ce\u00d0\u0005",
    "V,\u0002\u00cf\u00ce\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002",
    "\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d3\u0007\u000b",
    "\u0002\u0002\u00d2\u00d4\u0005V,\u0002\u00d3\u00d2\u0003\u0002\u0002",
    "\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002",
    "\u0002\u00d5\u00d6\u0007\b\u0002\u0002\u00d6\u00f8\u0005\b\u0005\u0002",
    "\u00d7\u00d8\u0007G\u0002\u0002\u00d8\u00d9\u0007\u0007\u0002\u0002",
    "\u00d9\u00da\u0007A\u0002\u0002\u00da\u00db\u0005\u0010\t\u0002\u00db",
    "\u00dd\u0007\u000b\u0002\u0002\u00dc\u00de\u0005V,\u0002\u00dd\u00dc",
    "\u0003\u0002\u0002\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df",
    "\u0003\u0002\u0002\u0002\u00df\u00e1\u0007\u000b\u0002\u0002\u00e0\u00e2",
    "\u0005V,\u0002\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003",
    "\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\u0007",
    "\b\u0002\u0002\u00e4\u00e5\u0005\b\u0005\u0002\u00e5\u00f8\u0003\u0002",
    "\u0002\u0002\u00e6\u00e7\u0007G\u0002\u0002\u00e7\u00e8\u0007\u0007",
    "\u0002\u0002\u00e8\u00e9\u0005X-\u0002\u00e9\u00ea\u0007R\u0002\u0002",
    "\u00ea\u00eb\u0005V,\u0002\u00eb\u00ec\u0007\b\u0002\u0002\u00ec\u00ed",
    "\u0005\b\u0005\u0002\u00ed\u00f8\u0003\u0002\u0002\u0002\u00ee\u00ef",
    "\u0007G\u0002\u0002\u00ef\u00f0\u0007\u0007\u0002\u0002\u00f0\u00f1",
    "\u0007A\u0002\u0002\u00f1\u00f2\u0005\u0012\n\u0002\u00f2\u00f3\u0007",
    "R\u0002\u0002\u00f3\u00f4\u0005V,\u0002\u00f4\u00f5\u0007\b\u0002\u0002",
    "\u00f5\u00f6\u0005\b\u0005\u0002\u00f6\u00f8\u0003\u0002\u0002\u0002",
    "\u00f7\u00ba\u0003\u0002\u0002\u0002\u00f7\u00c2\u0003\u0002\u0002\u0002",
    "\u00f7\u00c8\u0003\u0002\u0002\u0002\u00f7\u00d7\u0003\u0002\u0002\u0002",
    "\u00f7\u00e6\u0003\u0002\u0002\u0002\u00f7\u00ee\u0003\u0002\u0002\u0002",
    "\u00f8\u001d\u0003\u0002\u0002\u0002\u00f9\u00fc\u0007F\u0002\u0002",
    "\u00fa\u00fb\u0006\u0010\u0002\u0002\u00fb\u00fd\u0007e\u0002\u0002",
    "\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002\u0002",
    "\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00ff\u0005l7\u0002\u00ff",
    "\u001f\u0003\u0002\u0002\u0002\u0100\u0103\u0007:\u0002\u0002\u0101",
    "\u0102\u0006\u0011\u0003\u0002\u0102\u0104\u0007e\u0002\u0002\u0103",
    "\u0101\u0003\u0002\u0002\u0002\u0103\u0104\u0003\u0002\u0002\u0002\u0104",
    "\u0105\u0003\u0002\u0002\u0002\u0105\u0106\u0005l7\u0002\u0106!\u0003",
    "\u0002\u0002\u0002\u0107\u010a\u0007D\u0002\u0002\u0108\u0109\u0006",
    "\u0012\u0004\u0002\u0109\u010b\u0005V,\u0002\u010a\u0108\u0003\u0002",
    "\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002",
    "\u0002\u0002\u010c\u010d\u0005l7\u0002\u010d#\u0003\u0002\u0002\u0002",
    "\u010e\u010f\u0007M\u0002\u0002\u010f\u0110\u0007\u0007\u0002\u0002",
    "\u0110\u0111\u0005V,\u0002\u0111\u0112\u0007\b\u0002\u0002\u0112\u0113",
    "\u0005\b\u0005\u0002\u0113%\u0003\u0002\u0002\u0002\u0114\u0115\u0007",
    "H\u0002\u0002\u0115\u0116\u0007\u0007\u0002\u0002\u0116\u0117\u0005",
    "V,\u0002\u0117\u0118\u0007\b\u0002\u0002\u0118\u0119\u0005(\u0015\u0002",
    "\u0119\'\u0003\u0002\u0002\u0002\u011a\u011c\u0007\t\u0002\u0002\u011b",
    "\u011d\u0005*\u0016\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011c",
    "\u011d\u0003\u0002\u0002\u0002\u011d\u0122\u0003\u0002\u0002\u0002\u011e",
    "\u0120\u0005.\u0018\u0002\u011f\u0121\u0005*\u0016\u0002\u0120\u011f",
    "\u0003\u0002\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0123",
    "\u0003\u0002\u0002\u0002\u0122\u011e\u0003\u0002\u0002\u0002\u0122\u0123",
    "\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0125",
    "\u0007\n\u0002\u0002\u0125)\u0003\u0002\u0002\u0002\u0126\u0128\u0005",
    ",\u0017\u0002\u0127\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003",
    "\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u0129\u012a\u0003",
    "\u0002\u0002\u0002\u012a+\u0003\u0002\u0002\u0002\u012b\u012c\u0007",
    ">\u0002\u0002\u012c\u012d\u0005V,\u0002\u012d\u012f\u0007\u000f\u0002",
    "\u0002\u012e\u0130\u0005\f\u0007\u0002\u012f\u012e\u0003\u0002\u0002",
    "\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130-\u0003\u0002\u0002",
    "\u0002\u0131\u0132\u0007N\u0002\u0002\u0132\u0134\u0007\u000f\u0002",
    "\u0002\u0133\u0135\u0005\f\u0007\u0002\u0134\u0133\u0003\u0002\u0002",
    "\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135/\u0003\u0002\u0002",
    "\u0002\u0136\u0137\u0007e\u0002\u0002\u0137\u0138\u0007\u000f\u0002",
    "\u0002\u0138\u0139\u0005\b\u0005\u0002\u01391\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007P\u0002\u0002\u013b\u013c\u0006\u001a\u0005\u0002",
    "\u013c\u013d\u0005V,\u0002\u013d\u013e\u0005l7\u0002\u013e3\u0003\u0002",
    "\u0002\u0002\u013f\u0140\u0007S\u0002\u0002\u0140\u0141\u0005\n\u0006",
    "\u0002\u0141\u0142\u00056\u001c\u0002\u0142\u014d\u0003\u0002\u0002",
    "\u0002\u0143\u0144\u0007S\u0002\u0002\u0144\u0145\u0005\n\u0006\u0002",
    "\u0145\u0146\u00058\u001d\u0002\u0146\u014d\u0003\u0002\u0002\u0002",
    "\u0147\u0148\u0007S\u0002\u0002\u0148\u0149\u0005\n\u0006\u0002\u0149",
    "\u014a\u00056\u001c\u0002\u014a\u014b\u00058\u001d\u0002\u014b\u014d",
    "\u0003\u0002\u0002\u0002\u014c\u013f\u0003\u0002\u0002\u0002\u014c\u0143",
    "\u0003\u0002\u0002\u0002\u014c\u0147\u0003\u0002\u0002\u0002\u014d5",
    "\u0003\u0002\u0002\u0002\u014e\u014f\u0007B\u0002\u0002\u014f\u0150",
    "\u0007\u0007\u0002\u0002\u0150\u0151\u0007e\u0002\u0002\u0151\u0152",
    "\u0007\b\u0002\u0002\u0152\u0153\u0005\n\u0006\u0002\u01537\u0003\u0002",
    "\u0002\u0002\u0154\u0155\u0007C\u0002\u0002\u0155\u0156\u0005\n\u0006",
    "\u0002\u01569\u0003\u0002\u0002\u0002\u0157\u0158\u0007J\u0002\u0002",
    "\u0158\u0159\u0005l7\u0002\u0159;\u0003\u0002\u0002\u0002\u015a\u015b",
    "\u0007K\u0002\u0002\u015b\u015c\u0007e\u0002\u0002\u015c\u015e\u0007",
    "\u0007\u0002\u0002\u015d\u015f\u0005> \u0002\u015e\u015d\u0003\u0002",
    "\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002",
    "\u0002\u0002\u0160\u0161\u0007\b\u0002\u0002\u0161\u0162\u0007\t\u0002",
    "\u0002\u0162\u0163\u0005@!\u0002\u0163\u0164\u0007\n\u0002\u0002\u0164",
    "=\u0003\u0002\u0002\u0002\u0165\u016a\u0007e\u0002\u0002\u0166\u0167",
    "\u0007\f\u0002\u0002\u0167\u0169\u0007e\u0002\u0002\u0168\u0166\u0003",
    "\u0002\u0002\u0002\u0169\u016c\u0003\u0002\u0002\u0002\u016a\u0168\u0003",
    "\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b?\u0003",
    "\u0002\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016d\u016f\u0005",
    "\u0004\u0003\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003",
    "\u0002\u0002\u0002\u016fA\u0003\u0002\u0002\u0002\u0170\u0172\u0007",
    "\u0005\u0002\u0002\u0171\u0173\u0005D#\u0002\u0172\u0171\u0003\u0002",
    "\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0175\u0003\u0002",
    "\u0002\u0002\u0174\u0176\u0007\f\u0002\u0002\u0175\u0174\u0003\u0002",
    "\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u0178\u0003\u0002",
    "\u0002\u0002\u0177\u0179\u0005F$\u0002\u0178\u0177\u0003\u0002\u0002",
    "\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002",
    "\u0002\u017a\u017b\u0007\u0006\u0002\u0002\u017bC\u0003\u0002\u0002",
    "\u0002\u017c\u017e\u0005F$\u0002\u017d\u017c\u0003\u0002\u0002\u0002",
    "\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002",
    "\u017f\u0187\u0005X-\u0002\u0180\u0182\u0007\f\u0002\u0002\u0181\u0183",
    "\u0005F$\u0002\u0182\u0181\u0003\u0002\u0002\u0002\u0182\u0183\u0003",
    "\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0186\u0005",
    "X-\u0002\u0185\u0180\u0003\u0002\u0002\u0002\u0186\u0189\u0003\u0002",
    "\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002",
    "\u0002\u0002\u0188E\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002",
    "\u0002\u0002\u018a\u018c\u0007\f\u0002\u0002\u018b\u018a\u0003\u0002",
    "\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002",
    "\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018eG\u0003\u0002",
    "\u0002\u0002\u018f\u0190\u0007\t\u0002\u0002\u0190\u0199\u0007\n\u0002",
    "\u0002\u0191\u0192\u0007\t\u0002\u0002\u0192\u0194\u0005J&\u0002\u0193",
    "\u0195\u0007\f\u0002\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194",
    "\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196",
    "\u0197\u0007\n\u0002\u0002\u0197\u0199\u0003\u0002\u0002\u0002\u0198",
    "\u018f\u0003\u0002\u0002\u0002\u0198\u0191\u0003\u0002\u0002\u0002\u0199",
    "I\u0003\u0002\u0002\u0002\u019a\u019f\u0005L\'\u0002\u019b\u019c\u0007",
    "\f\u0002\u0002\u019c\u019e\u0005L\'\u0002\u019d\u019b\u0003\u0002\u0002",
    "\u0002\u019e\u01a1\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002",
    "\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0K\u0003\u0002\u0002",
    "\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005N(\u0002",
    "\u01a3\u01a4\u0007\u000f\u0002\u0002\u01a4\u01a5\u0005X-\u0002\u01a5",
    "\u01b6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0005h5\u0002\u01a7\u01a8",
    "\u0007\u0007\u0002\u0002\u01a8\u01a9\u0007\b\u0002\u0002\u01a9\u01aa",
    "\u0007\t\u0002\u0002\u01aa\u01ab\u0005@!\u0002\u01ab\u01ac\u0007\n\u0002",
    "\u0002\u01ac\u01b6\u0003\u0002\u0002\u0002\u01ad\u01ae\u0005j6\u0002",
    "\u01ae\u01af\u0007\u0007\u0002\u0002\u01af\u01b0\u0005P)\u0002\u01b0",
    "\u01b1\u0007\b\u0002\u0002\u01b1\u01b2\u0007\t\u0002\u0002\u01b2\u01b3",
    "\u0005@!\u0002\u01b3\u01b4\u0007\n\u0002\u0002\u01b4\u01b6\u0003\u0002",
    "\u0002\u0002\u01b5\u01a2\u0003\u0002\u0002\u0002\u01b5\u01a6\u0003\u0002",
    "\u0002\u0002\u01b5\u01ad\u0003\u0002\u0002\u0002\u01b6M\u0003\u0002",
    "\u0002\u0002\u01b7\u01bb\u0005`1\u0002\u01b8\u01bb\u0007f\u0002\u0002",
    "\u01b9\u01bb\u0005^0\u0002\u01ba\u01b7\u0003\u0002\u0002\u0002\u01ba",
    "\u01b8\u0003\u0002\u0002\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01bb",
    "O\u0003\u0002\u0002\u0002\u01bc\u01bd\u0007e\u0002\u0002\u01bdQ\u0003",
    "\u0002\u0002\u0002\u01be\u01c0\u0007\u0007\u0002\u0002\u01bf\u01c1\u0005",
    "T+\u0002\u01c0\u01bf\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002",
    "\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c3\u0007\b",
    "\u0002\u0002\u01c3S\u0003\u0002\u0002\u0002\u01c4\u01c9\u0005X-\u0002",
    "\u01c5\u01c6\u0007\f\u0002\u0002\u01c6\u01c8\u0005X-\u0002\u01c7\u01c5",
    "\u0003\u0002\u0002\u0002\u01c8\u01cb\u0003\u0002\u0002\u0002\u01c9\u01c7",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01caU",
    "\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cc\u01d1",
    "\u0005X-\u0002\u01cd\u01ce\u0007\f\u0002\u0002\u01ce\u01d0\u0005X-\u0002",
    "\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002",
    "\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002",
    "\u01d2W\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002",
    "\u01d4\u01d5\b-\u0001\u0002\u01d5\u01d7\u0007K\u0002\u0002\u01d6\u01d8",
    "\u0007e\u0002\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d7\u01d8",
    "\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01db",
    "\u0007\u0007\u0002\u0002\u01da\u01dc\u0005> \u0002\u01db\u01da\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003",
    "\u0002\u0002\u0002\u01dd\u01de\u0007\b\u0002\u0002\u01de\u01df\u0007",
    "\t\u0002\u0002\u01df\u01e0\u0005@!\u0002\u01e0\u01e1\u0007\n\u0002\u0002",
    "\u01e1\u0205\u0003\u0002\u0002\u0002\u01e2\u01e3\u0007@\u0002\u0002",
    "\u01e3\u01e5\u0005X-\u0002\u01e4\u01e6\u0005R*\u0002\u01e5\u01e4\u0003",
    "\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u0205\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\u0007Q\u0002\u0002\u01e8\u0205\u0005",
    "X-!\u01e9\u01ea\u0007E\u0002\u0002\u01ea\u0205\u0005X- \u01eb\u01ec",
    "\u0007=\u0002\u0002\u01ec\u0205\u0005X-\u001f\u01ed\u01ee\u0007\u0011",
    "\u0002\u0002\u01ee\u0205\u0005X-\u001e\u01ef\u01f0\u0007\u0012\u0002",
    "\u0002\u01f0\u0205\u0005X-\u001d\u01f1\u01f2\u0007\u0013\u0002\u0002",
    "\u01f2\u0205\u0005X-\u001c\u01f3\u01f4\u0007\u0014\u0002\u0002\u01f4",
    "\u0205\u0005X-\u001b\u01f5\u01f6\u0007\u0015\u0002\u0002\u01f6\u0205",
    "\u0005X-\u001a\u01f7\u01f8\u0007\u0016\u0002\u0002\u01f8\u0205\u0005",
    "X-\u0019\u01f9\u0205\u0007L\u0002\u0002\u01fa\u0205\u0007e\u0002\u0002",
    "\u01fb\u01fc\u0007T\u0002\u0002\u01fc\u0205\u0005R*\u0002\u01fd\u0205",
    "\u0005\\/\u0002\u01fe\u0205\u0005B\"\u0002\u01ff\u0205\u0005H%\u0002",
    "\u0200\u0201\u0007\u0007\u0002\u0002\u0201\u0202\u0005V,\u0002\u0202",
    "\u0203\u0007\b\u0002\u0002\u0203\u0205\u0003\u0002\u0002\u0002\u0204",
    "\u01d4\u0003\u0002\u0002\u0002\u0204\u01e2\u0003\u0002\u0002\u0002\u0204",
    "\u01e7\u0003\u0002\u0002\u0002\u0204\u01e9\u0003\u0002\u0002\u0002\u0204",
    "\u01eb\u0003\u0002\u0002\u0002\u0204\u01ed\u0003\u0002\u0002\u0002\u0204",
    "\u01ef\u0003\u0002\u0002\u0002\u0204\u01f1\u0003\u0002\u0002\u0002\u0204",
    "\u01f3\u0003\u0002\u0002\u0002\u0204\u01f5\u0003\u0002\u0002\u0002\u0204",
    "\u01f7\u0003\u0002\u0002\u0002\u0204\u01f9\u0003\u0002\u0002\u0002\u0204",
    "\u01fa\u0003\u0002\u0002\u0002\u0204\u01fb\u0003\u0002\u0002\u0002\u0204",
    "\u01fd\u0003\u0002\u0002\u0002\u0204\u01fe\u0003\u0002\u0002\u0002\u0204",
    "\u01ff\u0003\u0002\u0002\u0002\u0204\u0200\u0003\u0002\u0002\u0002\u0205",
    "\u0249\u0003\u0002\u0002\u0002\u0206\u0207\f\u0018\u0002\u0002\u0207",
    "\u0208\t\u0002\u0002\u0002\u0208\u0248\u0005X-\u0019\u0209\u020a\f\u0017",
    "\u0002\u0002\u020a\u020b\t\u0003\u0002\u0002\u020b\u0248\u0005X-\u0018",
    "\u020c\u020d\f\u0016\u0002\u0002\u020d\u020e\t\u0004\u0002\u0002\u020e",
    "\u0248\u0005X-\u0017\u020f\u0210\f\u0015\u0002\u0002\u0210\u0211\t\u0005",
    "\u0002\u0002\u0211\u0248\u0005X-\u0016\u0212\u0213\f\u0014\u0002\u0002",
    "\u0213\u0214\u0007<\u0002\u0002\u0214\u0248\u0005X-\u0015\u0215\u0216",
    "\f\u0013\u0002\u0002\u0216\u0217\u0007R\u0002\u0002\u0217\u0248\u0005",
    "X-\u0014\u0218\u0219\f\u0012\u0002\u0002\u0219\u021a\t\u0006\u0002\u0002",
    "\u021a\u0248\u0005X-\u0013\u021b\u021c\f\u0011\u0002\u0002\u021c\u021d",
    "\u0007%\u0002\u0002\u021d\u0248\u0005X-\u0012\u021e\u021f\f\u0010\u0002",
    "\u0002\u021f\u0220\u0007&\u0002\u0002\u0220\u0248\u0005X-\u0011\u0221",
    "\u0222\f\u000f\u0002\u0002\u0222\u0223\u0007\'\u0002\u0002\u0223\u0248",
    "\u0005X-\u0010\u0224\u0225\f\u000e\u0002\u0002\u0225\u0226\u0007(\u0002",
    "\u0002\u0226\u0248\u0005X-\u000f\u0227\u0228\f\r\u0002\u0002\u0228\u0229",
    "\u0007)\u0002\u0002\u0229\u0248\u0005X-\u000e\u022a\u022b\f\f\u0002",
    "\u0002\u022b\u022c\u0007\u000e\u0002\u0002\u022c\u022d\u0005X-\u0002",
    "\u022d\u022e\u0007\u000f\u0002\u0002\u022e\u022f\u0005X-\r\u022f\u0248",
    "\u0003\u0002\u0002\u0002\u0230\u0231\f\'\u0002\u0002\u0231\u0232\u0007",
    "\u0005\u0002\u0002\u0232\u0233\u0005V,\u0002\u0233\u0234\u0007\u0006",
    "\u0002\u0002\u0234\u0248\u0003\u0002\u0002\u0002\u0235\u0236\f&\u0002",
    "\u0002\u0236\u0237\u0007\u0010\u0002\u0002\u0237\u0248\u0005`1\u0002",
    "\u0238\u0239\f%\u0002\u0002\u0239\u0248\u0005R*\u0002\u023a\u023b\f",
    "#\u0002\u0002\u023b\u023c\u0006-\u0017\u0002\u023c\u0248\u0007\u0011",
    "\u0002\u0002\u023d\u023e\f\"\u0002\u0002\u023e\u023f\u0006-\u0019\u0002",
    "\u023f\u0248\u0007\u0012\u0002\u0002\u0240\u0241\f\u000b\u0002\u0002",
    "\u0241\u0242\u0007\r\u0002\u0002\u0242\u0248\u0005V,\u0002\u0243\u0244",
    "\f\n\u0002\u0002\u0244\u0245\u0005Z.\u0002\u0245\u0246\u0005V,\u0002",
    "\u0246\u0248\u0003\u0002\u0002\u0002\u0247\u0206\u0003\u0002\u0002\u0002",
    "\u0247\u0209\u0003\u0002\u0002\u0002\u0247\u020c\u0003\u0002\u0002\u0002",
    "\u0247\u020f\u0003\u0002\u0002\u0002\u0247\u0212\u0003\u0002\u0002\u0002",
    "\u0247\u0215\u0003\u0002\u0002\u0002\u0247\u0218\u0003\u0002\u0002\u0002",
    "\u0247\u021b\u0003\u0002\u0002\u0002\u0247\u021e\u0003\u0002\u0002\u0002",
    "\u0247\u0221\u0003\u0002\u0002\u0002\u0247\u0224\u0003\u0002\u0002\u0002",
    "\u0247\u0227\u0003\u0002\u0002\u0002\u0247\u022a\u0003\u0002\u0002\u0002",
    "\u0247\u0230\u0003\u0002\u0002\u0002\u0247\u0235\u0003\u0002\u0002\u0002",
    "\u0247\u0238\u0003\u0002\u0002\u0002\u0247\u023a\u0003\u0002\u0002\u0002",
    "\u0247\u023d\u0003\u0002\u0002\u0002\u0247\u0240\u0003\u0002\u0002\u0002",
    "\u0247\u0243\u0003\u0002\u0002\u0002\u0248\u024b\u0003\u0002\u0002\u0002",
    "\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002",
    "\u024aY\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002",
    "\u024c\u024d\t\u0007\u0002\u0002\u024d[\u0003\u0002\u0002\u0002\u024e",
    "\u0251\t\b\u0002\u0002\u024f\u0251\u0005^0\u0002\u0250\u024e\u0003\u0002",
    "\u0002\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0251]\u0003\u0002",
    "\u0002\u0002\u0252\u0253\t\t\u0002\u0002\u0253_\u0003\u0002\u0002\u0002",
    "\u0254\u0257\u0007e\u0002\u0002\u0255\u0257\u0005b2\u0002\u0256\u0254",
    "\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0257a",
    "\u0003\u0002\u0002\u0002\u0258\u025c\u0005d3\u0002\u0259\u025c\u0005",
    "f4\u0002\u025a\u025c\t\n\u0002\u0002\u025b\u0258\u0003\u0002\u0002\u0002",
    "\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025a\u0003\u0002\u0002\u0002",
    "\u025cc\u0003\u0002\u0002\u0002\u025d\u025e\t\u000b\u0002\u0002\u025e",
    "e\u0003\u0002\u0002\u0002\u025f\u0260\t\f\u0002\u0002\u0260g\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u00065\u001c\u0002\u0262\u0263\u0007e\u0002",
    "\u0002\u0263\u0264\u0005N(\u0002\u0264i\u0003\u0002\u0002\u0002\u0265",
    "\u0266\u00066\u001d\u0002\u0266\u0267\u0007e\u0002\u0002\u0267\u0268",
    "\u0005N(\u0002\u0268k\u0003\u0002\u0002\u0002\u0269\u026e\u0007\u000b",
    "\u0002\u0002\u026a\u026e\u0007\u0002\u0002\u0003\u026b\u026e\u00067",
    "\u001e\u0002\u026c\u026e\u00067\u001f\u0002\u026d\u0269\u0003\u0002",
    "\u0002\u0002\u026d\u026a\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002",
    "\u0002\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026em\u0003\u0002",
    "\u0002\u0002\u026f\u0270\u0007\u0002\u0002\u0003\u0270o\u0003\u0002",
    "\u0002\u00027qx|\u008d\u0091\u0098\u00a3\u00a8\u00b8\u00cb\u00cf\u00d3",
    "\u00dd\u00e1\u00f7\u00fc\u0103\u010a\u011c\u0120\u0122\u0129\u012f\u0134",
    "\u014c\u015e\u016a\u016e\u0172\u0175\u0178\u017d\u0182\u0187\u018d\u0194",
    "\u0198\u019f\u01b5\u01ba\u01c0\u01c9\u01d1\u01d7\u01db\u01e5\u0204\u0247",
    "\u0249\u0250\u0256\u025b\u026d"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ECMAScriptParser extends antlr4.Parser {

    static grammarFileName = "ECMAScript.g4";
    static literalNames = [ null, null, null, "'['", "']'", "'('", "')'", 
                            "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", 
                            "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", 
                            "'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", 
                            "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
                            "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                            "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", 
                            "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
                            "'^='", "'|='", "'null'", null, null, null, 
                            null, "'break'", "'do'", "'instanceof'", "'typeof'", 
                            "'case'", "'else'", "'new'", "'var'", "'catch'", 
                            "'finally'", "'return'", "'void'", "'continue'", 
                            "'for'", "'switch'", "'while'", "'debugger'", 
                            "'function'", "'this'", "'with'", "'default'", 
                            "'if'", "'throw'", "'delete'", "'in'", "'try'", 
                            "'Number'", "'class'", "'enum'", "'extends'", 
                            "'super'", "'const'", "'export'", "'import'" ];
    static symbolicNames = [ null, "RegularExpressionLiteral", "LineTerminator", 
                             "OpenBracket", "CloseBracket", "OpenParen", 
                             "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", 
                             "Comma", "Assign", "QuestionMark", "Colon", 
                             "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
                             "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                             "RightShiftArithmetic", "LeftShiftArithmetic", 
                             "RightShiftLogical", "LessThan", "MoreThan", 
                             "LessThanEquals", "GreaterThanEquals", "Equals", 
                             "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
                             "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "Number", 
                             "Class", "Enum", "Extends", "Super", "Const", 
                             "Export", "Import", "Implements", "Let", "Private", 
                             "Public", "Interface", "Package", "Protected", 
                             "Static", "Yield", "Identifier", "StringLiteral", 
                             "WhiteSpaces", "MultiLineComment", "SingleLineComment", 
                             "UnexpectedCharacter" ];
    static ruleNames = [ "program", "sourceElements", "sourceElement", "statement", 
                         "block", "statementList", "variableStatement", 
                         "variableDeclarationList", "variableDeclaration", 
                         "initialiser", "emptyStatement", "expressionStatement", 
                         "ifStatement", "iterationStatement", "continueStatement", 
                         "breakStatement", "returnStatement", "withStatement", 
                         "switchStatement", "caseBlock", "caseClauses", 
                         "caseClause", "defaultClause", "labelledStatement", 
                         "throwStatement", "tryStatement", "catchProduction", 
                         "finallyProduction", "debuggerStatement", "functionDeclaration", 
                         "formalParameterList", "functionBody", "arrayLiteral", 
                         "elementList", "elision", "objectLiteral", "propertyNameAndValueList", 
                         "propertyAssignment", "propertyName", "propertySetParameterList", 
                         "arguments", "argumentList", "expressionSequence", 
                         "singleExpression", "assignmentOperator", "literal", 
                         "numericLiteral", "identifierName", "reservedWord", 
                         "keyword", "futureReservedWord", "getter", "setter", 
                         "eos", "eof" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ECMAScriptParser.ruleNames;
        this.literalNames = ECMAScriptParser.literalNames;
        this.symbolicNames = ECMAScriptParser.symbolicNames;

        /**
         * Returns true if, on the current index of the parser's token stream,
         * a token of the given type exists on the HIDDEN channel.
         * @param type {Number} The type of the token on the HIDDEN channel to check.
         * @returns {Boolean}
         */
        ECMAScriptParser.prototype.here = function(type) {
            var possibleIndexEosToken = antlr4.Parser.prototype.getCurrentToken.call(this).tokenIndex - 1;
            var ahead = this._input.get(possibleIndexEosToken);
            return (ahead.channel == antlr4.Lexer.HIDDEN) && (ahead.type == type);
        };

        /**
         * Returns true if, on the current index of the parser's
         * token stream, a token exists on the HIDDEN channel which
         * either is a line terminator, or is a multi line comment that
         * contains a line terminator.
         * @returns {Boolean}
         */
        ECMAScriptParser.prototype.lineTerminatorAhead = function() {
            var possibleIndexEosToken = antlr4.Parser.prototype.getCurrentToken.call(this).tokenIndex - 1;
            var ahead = this._input.get(possibleIndexEosToken);
            if (ahead.channel != antlr4.Lexer.HIDDEN)
                return false;
            var text = ahead.text;
            var type = ahead.type;
            return (type == ECMAScriptParser.MultiLineComment && text.indexOf("\r") !== -1 || text.indexOf("\n") !== -1) ||
                    (type == ECMAScriptParser.LineTerminator);
        };

    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 14:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 15:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 16:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 24:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 43:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 51:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 52:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 53:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 22);
    		case 5:
    			return this.precpred(this._ctx, 21);
    		case 6:
    			return this.precpred(this._ctx, 20);
    		case 7:
    			return this.precpred(this._ctx, 19);
    		case 8:
    			return this.precpred(this._ctx, 18);
    		case 9:
    			return this.precpred(this._ctx, 17);
    		case 10:
    			return this.precpred(this._ctx, 16);
    		case 11:
    			return this.precpred(this._ctx, 15);
    		case 12:
    			return this.precpred(this._ctx, 14);
    		case 13:
    			return this.precpred(this._ctx, 13);
    		case 14:
    			return this.precpred(this._ctx, 12);
    		case 15:
    			return this.precpred(this._ctx, 11);
    		case 16:
    			return this.precpred(this._ctx, 10);
    		case 17:
    			return this.precpred(this._ctx, 37);
    		case 18:
    			return this.precpred(this._ctx, 36);
    		case 19:
    			return this.precpred(this._ctx, 35);
    		case 20:
    			return this.precpred(this._ctx, 33);
    		case 21:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		case 22:
    			return this.precpred(this._ctx, 32);
    		case 23:
    			return !this.here(ECMAScriptParser.LineTerminator);
    		case 24:
    			return this.precpred(this._ctx, 9);
    		case 25:
    			return this.precpred(this._ctx, 8);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 26:
    			return this._input.LT(1).text.startsWith("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 27:
    			return this._input.LT(1).text.startsWith("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 28:
    			return this.lineTerminatorAhead();
    		case 29:
    			return this._input.LT(1).type == ECMAScriptParser.CloseBrace;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ECMAScriptParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 110;
	            this.sourceElements();
	        }

	        this.state = 113;
	        this.match(ECMAScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ECMAScriptParser.RULE_sourceElements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 116; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 115;
	            this.sourceElement();
	            this.state = 118; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ECMAScriptParser.RULE_sourceElement);
	    try {
	        this.state = 122;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 120;
	            this.statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 121;
	            this.functionDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ECMAScriptParser.RULE_statement);
	    try {
	        this.state = 139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 124;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 125;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 126;
	            this.emptyStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 127;
	            this.expressionStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 128;
	            this.ifStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 129;
	            this.iterationStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 130;
	            this.continueStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 131;
	            this.breakStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 132;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 133;
	            this.withStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 134;
	            this.labelledStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 135;
	            this.switchStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 136;
	            this.throwStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 137;
	            this.tryStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 138;
	            this.debuggerStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ECMAScriptParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 141;
	        this.match(ECMAScriptParser.OpenBrace);
	        this.state = 143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 142;
	            this.statementList();
	        }

	        this.state = 145;
	        this.match(ECMAScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ECMAScriptParser.RULE_statementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 148; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 147;
	            this.statement();
	            this.state = 150; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ECMAScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 152;
	        this.match(ECMAScriptParser.Var);
	        this.state = 153;
	        this.variableDeclarationList();
	        this.state = 154;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ECMAScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 156;
	        this.variableDeclaration();
	        this.state = 161;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 157;
	                this.match(ECMAScriptParser.Comma);
	                this.state = 158;
	                this.variableDeclaration(); 
	            }
	            this.state = 163;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ECMAScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 164;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 165;
	            this.initialiser();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initialiser() {
	    let localctx = new InitialiserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ECMAScriptParser.RULE_initialiser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this.match(ECMAScriptParser.Assign);
	        this.state = 169;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ECMAScriptParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 171;
	        this.match(ECMAScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ECMAScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this.expressionSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ECMAScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 175;
	        this.match(ECMAScriptParser.If);
	        this.state = 176;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 177;
	        this.expressionSequence();
	        this.state = 178;
	        this.match(ECMAScriptParser.CloseParen);
	        this.state = 179;
	        this.statement();
	        this.state = 182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 180;
	            this.match(ECMAScriptParser.Else);
	            this.state = 181;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ECMAScriptParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 184;
	            this.match(ECMAScriptParser.Do);
	            this.state = 185;
	            this.statement();
	            this.state = 186;
	            this.match(ECMAScriptParser.While);
	            this.state = 187;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 188;
	            this.expressionSequence();
	            this.state = 189;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 190;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 192;
	            this.match(ECMAScriptParser.While);
	            this.state = 193;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 194;
	            this.expressionSequence();
	            this.state = 195;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 196;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 198;
	            this.match(ECMAScriptParser.For);
	            this.state = 199;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	                this.state = 200;
	                this.expressionSequence();
	            }

	            this.state = 203;
	            this.match(ECMAScriptParser.SemiColon);
	            this.state = 205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	                this.state = 204;
	                this.expressionSequence();
	            }

	            this.state = 207;
	            this.match(ECMAScriptParser.SemiColon);
	            this.state = 209;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	                this.state = 208;
	                this.expressionSequence();
	            }

	            this.state = 211;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 212;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForVarStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 213;
	            this.match(ECMAScriptParser.For);
	            this.state = 214;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 215;
	            this.match(ECMAScriptParser.Var);
	            this.state = 216;
	            this.variableDeclarationList();
	            this.state = 217;
	            this.match(ECMAScriptParser.SemiColon);
	            this.state = 219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	                this.state = 218;
	                this.expressionSequence();
	            }

	            this.state = 221;
	            this.match(ECMAScriptParser.SemiColon);
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	                this.state = 222;
	                this.expressionSequence();
	            }

	            this.state = 225;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 226;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 228;
	            this.match(ECMAScriptParser.For);
	            this.state = 229;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 230;
	            this.singleExpression(0);
	            this.state = 231;
	            this.match(ECMAScriptParser.In);
	            this.state = 232;
	            this.expressionSequence();
	            this.state = 233;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 234;
	            this.statement();
	            break;

	        case 6:
	            localctx = new ForVarInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 236;
	            this.match(ECMAScriptParser.For);
	            this.state = 237;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 238;
	            this.match(ECMAScriptParser.Var);
	            this.state = 239;
	            this.variableDeclaration();
	            this.state = 240;
	            this.match(ECMAScriptParser.In);
	            this.state = 241;
	            this.expressionSequence();
	            this.state = 242;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 243;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ECMAScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 247;
	        this.match(ECMAScriptParser.Continue);
	        this.state = 250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        if(la_===1) {
	            this.state = 248;
	            if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	                throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	            }
	            this.state = 249;
	            this.match(ECMAScriptParser.Identifier);

	        }
	        this.state = 252;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ECMAScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this.match(ECMAScriptParser.Break);
	        this.state = 257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 255;
	            if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	                throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	            }
	            this.state = 256;
	            this.match(ECMAScriptParser.Identifier);

	        }
	        this.state = 259;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ECMAScriptParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(ECMAScriptParser.Return);
	        this.state = 264;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 262;
	            if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	                throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	            }
	            this.state = 263;
	            this.expressionSequence();

	        }
	        this.state = 266;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ECMAScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 268;
	        this.match(ECMAScriptParser.With);
	        this.state = 269;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 270;
	        this.expressionSequence();
	        this.state = 271;
	        this.match(ECMAScriptParser.CloseParen);
	        this.state = 272;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ECMAScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this.match(ECMAScriptParser.Switch);
	        this.state = 275;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 276;
	        this.expressionSequence();
	        this.state = 277;
	        this.match(ECMAScriptParser.CloseParen);
	        this.state = 278;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ECMAScriptParser.RULE_caseBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.match(ECMAScriptParser.OpenBrace);
	        this.state = 282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ECMAScriptParser.Case) {
	            this.state = 281;
	            this.caseClauses();
	        }

	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ECMAScriptParser.Default) {
	            this.state = 284;
	            this.defaultClause();
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ECMAScriptParser.Case) {
	                this.state = 285;
	                this.caseClauses();
	            }

	        }

	        this.state = 290;
	        this.match(ECMAScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ECMAScriptParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 292;
	            this.caseClause();
	            this.state = 295; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ECMAScriptParser.Case);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ECMAScriptParser.RULE_caseClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(ECMAScriptParser.Case);
	        this.state = 298;
	        this.expressionSequence();
	        this.state = 299;
	        this.match(ECMAScriptParser.Colon);
	        this.state = 301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 300;
	            this.statementList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ECMAScriptParser.RULE_defaultClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.match(ECMAScriptParser.Default);
	        this.state = 304;
	        this.match(ECMAScriptParser.Colon);
	        this.state = 306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 305;
	            this.statementList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ECMAScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 309;
	        this.match(ECMAScriptParser.Colon);
	        this.state = 310;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ECMAScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.match(ECMAScriptParser.Throw);
	        this.state = 313;
	        if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	            throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	        }
	        this.state = 314;
	        this.expressionSequence();
	        this.state = 315;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ECMAScriptParser.RULE_tryStatement);
	    try {
	        this.state = 330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 317;
	            this.match(ECMAScriptParser.Try);
	            this.state = 318;
	            this.block();
	            this.state = 319;
	            this.catchProduction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 321;
	            this.match(ECMAScriptParser.Try);
	            this.state = 322;
	            this.block();
	            this.state = 323;
	            this.finallyProduction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 325;
	            this.match(ECMAScriptParser.Try);
	            this.state = 326;
	            this.block();
	            this.state = 327;
	            this.catchProduction();
	            this.state = 328;
	            this.finallyProduction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ECMAScriptParser.RULE_catchProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 332;
	        this.match(ECMAScriptParser.Catch);
	        this.state = 333;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 334;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 335;
	        this.match(ECMAScriptParser.CloseParen);
	        this.state = 336;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ECMAScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.match(ECMAScriptParser.Finally);
	        this.state = 339;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ECMAScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        this.match(ECMAScriptParser.Debugger);
	        this.state = 342;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ECMAScriptParser.RULE_functionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.match(ECMAScriptParser.Function);
	        this.state = 345;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 346;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ECMAScriptParser.Identifier) {
	            this.state = 347;
	            this.formalParameterList();
	        }

	        this.state = 350;
	        this.match(ECMAScriptParser.CloseParen);
	        this.state = 351;
	        this.match(ECMAScriptParser.OpenBrace);
	        this.state = 352;
	        this.functionBody();
	        this.state = 353;
	        this.match(ECMAScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ECMAScriptParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ECMAScriptParser.Comma) {
	            this.state = 356;
	            this.match(ECMAScriptParser.Comma);
	            this.state = 357;
	            this.match(ECMAScriptParser.Identifier);
	            this.state = 362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ECMAScriptParser.RULE_functionBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.SemiColon) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Break - 51)) | (1 << (ECMAScriptParser.Do - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Var - 51)) | (1 << (ECMAScriptParser.Return - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Continue - 51)) | (1 << (ECMAScriptParser.For - 51)) | (1 << (ECMAScriptParser.Switch - 51)) | (1 << (ECMAScriptParser.While - 51)) | (1 << (ECMAScriptParser.Debugger - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.With - 51)) | (1 << (ECMAScriptParser.If - 51)) | (1 << (ECMAScriptParser.Throw - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Try - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 363;
	            this.sourceElements();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ECMAScriptParser.RULE_arrayLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this.match(ECMAScriptParser.OpenBracket);
	        this.state = 368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 367;
	            this.elementList();

	        }
	        this.state = 371;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 370;
	            this.match(ECMAScriptParser.Comma);

	        }
	        this.state = 374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ECMAScriptParser.Comma) {
	            this.state = 373;
	            this.elision();
	        }

	        this.state = 376;
	        this.match(ECMAScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ECMAScriptParser.RULE_elementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ECMAScriptParser.Comma) {
	            this.state = 378;
	            this.elision();
	        }

	        this.state = 381;
	        this.singleExpression(0);
	        this.state = 389;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 382;
	                this.match(ECMAScriptParser.Comma);
	                this.state = 384;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ECMAScriptParser.Comma) {
	                    this.state = 383;
	                    this.elision();
	                }

	                this.state = 386;
	                this.singleExpression(0); 
	            }
	            this.state = 391;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elision() {
	    let localctx = new ElisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ECMAScriptParser.RULE_elision);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 392;
	            this.match(ECMAScriptParser.Comma);
	            this.state = 395; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===ECMAScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ECMAScriptParser.RULE_objectLiteral);
	    var _la = 0; // Token type
	    try {
	        this.state = 406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 397;
	            this.match(ECMAScriptParser.OpenBrace);
	            this.state = 398;
	            this.match(ECMAScriptParser.CloseBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 399;
	            this.match(ECMAScriptParser.OpenBrace);
	            this.state = 400;
	            this.propertyNameAndValueList();
	            this.state = 402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ECMAScriptParser.Comma) {
	                this.state = 401;
	                this.match(ECMAScriptParser.Comma);
	            }

	            this.state = 404;
	            this.match(ECMAScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyNameAndValueList() {
	    let localctx = new PropertyNameAndValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ECMAScriptParser.RULE_propertyNameAndValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 408;
	        this.propertyAssignment();
	        this.state = 413;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 409;
	                this.match(ECMAScriptParser.Comma);
	                this.state = 410;
	                this.propertyAssignment(); 
	            }
	            this.state = 415;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ECMAScriptParser.RULE_propertyAssignment);
	    try {
	        this.state = 435;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 416;
	            this.propertyName();
	            this.state = 417;
	            this.match(ECMAScriptParser.Colon);
	            this.state = 418;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 420;
	            this.getter();
	            this.state = 421;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 422;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 423;
	            this.match(ECMAScriptParser.OpenBrace);
	            this.state = 424;
	            this.functionBody();
	            this.state = 425;
	            this.match(ECMAScriptParser.CloseBrace);
	            break;

	        case 3:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 427;
	            this.setter();
	            this.state = 428;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 429;
	            this.propertySetParameterList();
	            this.state = 430;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 431;
	            this.match(ECMAScriptParser.OpenBrace);
	            this.state = 432;
	            this.functionBody();
	            this.state = 433;
	            this.match(ECMAScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ECMAScriptParser.RULE_propertyName);
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ECMAScriptParser.NullLiteral:
	        case ECMAScriptParser.BooleanLiteral:
	        case ECMAScriptParser.Break:
	        case ECMAScriptParser.Do:
	        case ECMAScriptParser.Instanceof:
	        case ECMAScriptParser.Typeof:
	        case ECMAScriptParser.Case:
	        case ECMAScriptParser.Else:
	        case ECMAScriptParser.New:
	        case ECMAScriptParser.Var:
	        case ECMAScriptParser.Catch:
	        case ECMAScriptParser.Finally:
	        case ECMAScriptParser.Return:
	        case ECMAScriptParser.Void:
	        case ECMAScriptParser.Continue:
	        case ECMAScriptParser.For:
	        case ECMAScriptParser.Switch:
	        case ECMAScriptParser.While:
	        case ECMAScriptParser.Debugger:
	        case ECMAScriptParser.Function:
	        case ECMAScriptParser.This:
	        case ECMAScriptParser.With:
	        case ECMAScriptParser.Default:
	        case ECMAScriptParser.If:
	        case ECMAScriptParser.Throw:
	        case ECMAScriptParser.Delete:
	        case ECMAScriptParser.In:
	        case ECMAScriptParser.Try:
	        case ECMAScriptParser.Class:
	        case ECMAScriptParser.Enum:
	        case ECMAScriptParser.Extends:
	        case ECMAScriptParser.Super:
	        case ECMAScriptParser.Const:
	        case ECMAScriptParser.Export:
	        case ECMAScriptParser.Import:
	        case ECMAScriptParser.Implements:
	        case ECMAScriptParser.Let:
	        case ECMAScriptParser.Private:
	        case ECMAScriptParser.Public:
	        case ECMAScriptParser.Interface:
	        case ECMAScriptParser.Package:
	        case ECMAScriptParser.Protected:
	        case ECMAScriptParser.Static:
	        case ECMAScriptParser.Yield:
	        case ECMAScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 437;
	            this.identifierName();
	            break;
	        case ECMAScriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 438;
	            this.match(ECMAScriptParser.StringLiteral);
	            break;
	        case ECMAScriptParser.DecimalLiteral:
	        case ECMAScriptParser.HexIntegerLiteral:
	        case ECMAScriptParser.OctalIntegerLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 439;
	            this.numericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySetParameterList() {
	    let localctx = new PropertySetParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ECMAScriptParser.RULE_propertySetParameterList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.match(ECMAScriptParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ECMAScriptParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.match(ECMAScriptParser.OpenParen);
	        this.state = 446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RegularExpressionLiteral) | (1 << ECMAScriptParser.OpenBracket) | (1 << ECMAScriptParser.OpenParen) | (1 << ECMAScriptParser.OpenBrace) | (1 << ECMAScriptParser.PlusPlus) | (1 << ECMAScriptParser.MinusMinus) | (1 << ECMAScriptParser.Plus) | (1 << ECMAScriptParser.Minus) | (1 << ECMAScriptParser.BitNot) | (1 << ECMAScriptParser.Not))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (ECMAScriptParser.NullLiteral - 51)) | (1 << (ECMAScriptParser.BooleanLiteral - 51)) | (1 << (ECMAScriptParser.DecimalLiteral - 51)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 51)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 51)) | (1 << (ECMAScriptParser.Typeof - 51)) | (1 << (ECMAScriptParser.New - 51)) | (1 << (ECMAScriptParser.Void - 51)) | (1 << (ECMAScriptParser.Function - 51)) | (1 << (ECMAScriptParser.This - 51)) | (1 << (ECMAScriptParser.Delete - 51)) | (1 << (ECMAScriptParser.Number - 51)))) !== 0) || _la===ECMAScriptParser.Identifier || _la===ECMAScriptParser.StringLiteral) {
	            this.state = 445;
	            this.argumentList();
	        }

	        this.state = 448;
	        this.match(ECMAScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ECMAScriptParser.RULE_argumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.singleExpression(0);
	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ECMAScriptParser.Comma) {
	            this.state = 451;
	            this.match(ECMAScriptParser.Comma);
	            this.state = 452;
	            this.singleExpression(0);
	            this.state = 457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
		console.log(this._ctx)
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ECMAScriptParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.singleExpression(0);
	        this.state = 463;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 459;
	                this.match(ECMAScriptParser.Comma);
	                this.state = 460;
	                this.singleExpression(0); 
	            }
	            this.state = 465;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 86;
	    this.enterRecursionRule(localctx, 86, ECMAScriptParser.RULE_singleExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ECMAScriptParser.Function:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 467;
	            this.match(ECMAScriptParser.Function);
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ECMAScriptParser.Identifier) {
	                this.state = 468;
	                this.match(ECMAScriptParser.Identifier);
	            }

	            this.state = 471;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ECMAScriptParser.Identifier) {
	                this.state = 472;
	                this.formalParameterList();
	            }

	            this.state = 475;
	            this.match(ECMAScriptParser.CloseParen);
	            this.state = 476;
	            this.match(ECMAScriptParser.OpenBrace);
	            this.state = 477;
	            this.functionBody();
	            this.state = 478;
	            this.match(ECMAScriptParser.CloseBrace);
	            break;
	        case ECMAScriptParser.New:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 480;
	            this.match(ECMAScriptParser.New);
	            this.state = 481;
	            this.singleExpression(0);
	            this.state = 483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            if(la_===1) {
	                this.state = 482;
	                this.arguments();

	            }
	            break;
	        case ECMAScriptParser.Delete:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 485;
	            this.match(ECMAScriptParser.Delete);
	            this.state = 486;
	            this.singleExpression(31);
	            break;
	        case ECMAScriptParser.Void:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 487;
	            this.match(ECMAScriptParser.Void);
	            this.state = 488;
	            this.singleExpression(30);
	            break;
	        case ECMAScriptParser.Typeof:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 489;
	            this.match(ECMAScriptParser.Typeof);
	            this.state = 490;
	            this.singleExpression(29);
	            break;
	        case ECMAScriptParser.PlusPlus:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 491;
	            this.match(ECMAScriptParser.PlusPlus);
	            this.state = 492;
	            this.singleExpression(28);
	            break;
	        case ECMAScriptParser.MinusMinus:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 493;
	            this.match(ECMAScriptParser.MinusMinus);
	            this.state = 494;
	            this.singleExpression(27);
	            break;
	        case ECMAScriptParser.Plus:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 495;
	            this.match(ECMAScriptParser.Plus);
	            this.state = 496;
	            this.singleExpression(26);
	            break;
	        case ECMAScriptParser.Minus:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 497;
	            this.match(ECMAScriptParser.Minus);
	            this.state = 498;
	            this.singleExpression(25);
	            break;
	        case ECMAScriptParser.BitNot:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 499;
	            this.match(ECMAScriptParser.BitNot);
	            this.state = 500;
	            this.singleExpression(24);
	            break;
	        case ECMAScriptParser.Not:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 501;
	            this.match(ECMAScriptParser.Not);
	            this.state = 502;
	            this.singleExpression(23);
	            break;
	        case ECMAScriptParser.This:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 503;
	            this.match(ECMAScriptParser.This);
	            break;
	        case ECMAScriptParser.Identifier:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 504;
	            this.match(ECMAScriptParser.Identifier);
	            break;
	        case ECMAScriptParser.Number:
	            localctx = new NumberExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 505;
	            this.match(ECMAScriptParser.Number);
	            this.state = 506;
	            this.arguments();
	            break;
	        case ECMAScriptParser.RegularExpressionLiteral:
	        case ECMAScriptParser.NullLiteral:
	        case ECMAScriptParser.BooleanLiteral:
	        case ECMAScriptParser.DecimalLiteral:
	        case ECMAScriptParser.HexIntegerLiteral:
	        case ECMAScriptParser.OctalIntegerLiteral:
	        case ECMAScriptParser.StringLiteral:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 507;
	            this.literal();
	            break;
	        case ECMAScriptParser.OpenBracket:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 508;
	            this.arrayLiteral();
	            break;
	        case ECMAScriptParser.OpenBrace:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 509;
	            this.objectLiteral();
	            break;
	        case ECMAScriptParser.OpenParen:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 510;
	            this.match(ECMAScriptParser.OpenParen);
	            this.state = 511;
	            this.expressionSequence();
	            this.state = 512;
	            this.match(ECMAScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 583;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 581;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 516;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 517;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.Multiply) | (1 << ECMAScriptParser.Divide) | (1 << ECMAScriptParser.Modulus))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 518;
	                    this.singleExpression(23);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 519;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 520;
	                    _la = this._input.LA(1);
	                    if(!(_la===ECMAScriptParser.Plus || _la===ECMAScriptParser.Minus)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 521;
	                    this.singleExpression(22);
	                    break;

	                case 3:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 522;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 523;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.RightShiftArithmetic) | (1 << ECMAScriptParser.LeftShiftArithmetic) | (1 << ECMAScriptParser.RightShiftLogical))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 524;
	                    this.singleExpression(21);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 525;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 526;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ECMAScriptParser.LessThan) | (1 << ECMAScriptParser.MoreThan) | (1 << ECMAScriptParser.LessThanEquals) | (1 << ECMAScriptParser.GreaterThanEquals))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 527;
	                    this.singleExpression(20);
	                    break;

	                case 5:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 528;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 529;
	                    this.match(ECMAScriptParser.Instanceof);
	                    this.state = 530;
	                    this.singleExpression(19);
	                    break;

	                case 6:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 531;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 532;
	                    this.match(ECMAScriptParser.In);
	                    this.state = 533;
	                    this.singleExpression(18);
	                    break;

	                case 7:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 534;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 535;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (ECMAScriptParser.Equals - 31)) | (1 << (ECMAScriptParser.NotEquals - 31)) | (1 << (ECMAScriptParser.IdentityEquals - 31)) | (1 << (ECMAScriptParser.IdentityNotEquals - 31)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 536;
	                    this.singleExpression(17);
	                    break;

	                case 8:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 537;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 538;
	                    this.match(ECMAScriptParser.BitAnd);
	                    this.state = 539;
	                    this.singleExpression(16);
	                    break;

	                case 9:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 540;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 541;
	                    this.match(ECMAScriptParser.BitXOr);
	                    this.state = 542;
	                    this.singleExpression(15);
	                    break;

	                case 10:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 543;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 544;
	                    this.match(ECMAScriptParser.BitOr);
	                    this.state = 545;
	                    this.singleExpression(14);
	                    break;

	                case 11:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 546;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 547;
	                    this.match(ECMAScriptParser.And);
	                    this.state = 548;
	                    this.singleExpression(13);
	                    break;

	                case 12:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 549;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 550;
	                    this.match(ECMAScriptParser.Or);
	                    this.state = 551;
	                    this.singleExpression(12);
	                    break;

	                case 13:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 552;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 553;
	                    this.match(ECMAScriptParser.QuestionMark);
	                    this.state = 554;
	                    this.singleExpression(0);
	                    this.state = 555;
	                    this.match(ECMAScriptParser.Colon);
	                    this.state = 556;
	                    this.singleExpression(11);
	                    break;

	                case 14:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 558;
	                    if (!( this.precpred(this._ctx, 37))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
	                    }
	                    this.state = 559;
	                    this.match(ECMAScriptParser.OpenBracket);
	                    this.state = 560;
	                    this.expressionSequence();
	                    this.state = 561;
	                    this.match(ECMAScriptParser.CloseBracket);
	                    break;

	                case 15:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 563;
	                    if (!( this.precpred(this._ctx, 36))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
	                    }
	                    this.state = 564;
	                    this.match(ECMAScriptParser.Dot);
	                    this.state = 565;
	                    this.identifierName();
	                    break;

	                case 16:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 566;
	                    if (!( this.precpred(this._ctx, 35))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
	                    }
	                    this.state = 567;
	                    this.arguments();
	                    break;

	                case 17:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 568;
	                    if (!( this.precpred(this._ctx, 33))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
	                    }
	                    this.state = 569;
	                    if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	                    }
	                    this.state = 570;
	                    this.match(ECMAScriptParser.PlusPlus);
	                    break;

	                case 18:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 571;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 572;
	                    if (!( !this.here(ECMAScriptParser.LineTerminator))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!this.here(ECMAScriptParser.LineTerminator)");
	                    }
	                    this.state = 573;
	                    this.match(ECMAScriptParser.MinusMinus);
	                    break;

	                case 19:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 574;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 575;
	                    this.match(ECMAScriptParser.Assign);
	                    this.state = 576;
	                    this.expressionSequence();
	                    break;

	                case 20:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);
	                    this.state = 577;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 578;
	                    this.assignmentOperator();
	                    this.state = 579;
	                    this.expressionSequence();
	                    break;

	                } 
	            }
	            this.state = 585;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ECMAScriptParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        _la = this._input.LA(1);
	        if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (ECMAScriptParser.MultiplyAssign - 40)) | (1 << (ECMAScriptParser.DivideAssign - 40)) | (1 << (ECMAScriptParser.ModulusAssign - 40)) | (1 << (ECMAScriptParser.PlusAssign - 40)) | (1 << (ECMAScriptParser.MinusAssign - 40)) | (1 << (ECMAScriptParser.LeftShiftArithmeticAssign - 40)) | (1 << (ECMAScriptParser.RightShiftArithmeticAssign - 40)) | (1 << (ECMAScriptParser.RightShiftLogicalAssign - 40)) | (1 << (ECMAScriptParser.BitAndAssign - 40)) | (1 << (ECMAScriptParser.BitXorAssign - 40)) | (1 << (ECMAScriptParser.BitOrAssign - 40)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ECMAScriptParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 590;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ECMAScriptParser.RegularExpressionLiteral:
	        case ECMAScriptParser.NullLiteral:
	        case ECMAScriptParser.BooleanLiteral:
	        case ECMAScriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 588;
	            _la = this._input.LA(1);
	            if(!(_la===ECMAScriptParser.RegularExpressionLiteral || _la===ECMAScriptParser.NullLiteral || _la===ECMAScriptParser.BooleanLiteral || _la===ECMAScriptParser.StringLiteral)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case ECMAScriptParser.DecimalLiteral:
	        case ECMAScriptParser.HexIntegerLiteral:
	        case ECMAScriptParser.OctalIntegerLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 589;
	            this.numericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ECMAScriptParser.RULE_numericLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (ECMAScriptParser.DecimalLiteral - 53)) | (1 << (ECMAScriptParser.HexIntegerLiteral - 53)) | (1 << (ECMAScriptParser.OctalIntegerLiteral - 53)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ECMAScriptParser.RULE_identifierName);
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ECMAScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            this.match(ECMAScriptParser.Identifier);
	            break;
	        case ECMAScriptParser.NullLiteral:
	        case ECMAScriptParser.BooleanLiteral:
	        case ECMAScriptParser.Break:
	        case ECMAScriptParser.Do:
	        case ECMAScriptParser.Instanceof:
	        case ECMAScriptParser.Typeof:
	        case ECMAScriptParser.Case:
	        case ECMAScriptParser.Else:
	        case ECMAScriptParser.New:
	        case ECMAScriptParser.Var:
	        case ECMAScriptParser.Catch:
	        case ECMAScriptParser.Finally:
	        case ECMAScriptParser.Return:
	        case ECMAScriptParser.Void:
	        case ECMAScriptParser.Continue:
	        case ECMAScriptParser.For:
	        case ECMAScriptParser.Switch:
	        case ECMAScriptParser.While:
	        case ECMAScriptParser.Debugger:
	        case ECMAScriptParser.Function:
	        case ECMAScriptParser.This:
	        case ECMAScriptParser.With:
	        case ECMAScriptParser.Default:
	        case ECMAScriptParser.If:
	        case ECMAScriptParser.Throw:
	        case ECMAScriptParser.Delete:
	        case ECMAScriptParser.In:
	        case ECMAScriptParser.Try:
	        case ECMAScriptParser.Class:
	        case ECMAScriptParser.Enum:
	        case ECMAScriptParser.Extends:
	        case ECMAScriptParser.Super:
	        case ECMAScriptParser.Const:
	        case ECMAScriptParser.Export:
	        case ECMAScriptParser.Import:
	        case ECMAScriptParser.Implements:
	        case ECMAScriptParser.Let:
	        case ECMAScriptParser.Private:
	        case ECMAScriptParser.Public:
	        case ECMAScriptParser.Interface:
	        case ECMAScriptParser.Package:
	        case ECMAScriptParser.Protected:
	        case ECMAScriptParser.Static:
	        case ECMAScriptParser.Yield:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            this.reservedWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ECMAScriptParser.RULE_reservedWord);
	    var _la = 0; // Token type
	    try {
	        this.state = 601;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ECMAScriptParser.Break:
	        case ECMAScriptParser.Do:
	        case ECMAScriptParser.Instanceof:
	        case ECMAScriptParser.Typeof:
	        case ECMAScriptParser.Case:
	        case ECMAScriptParser.Else:
	        case ECMAScriptParser.New:
	        case ECMAScriptParser.Var:
	        case ECMAScriptParser.Catch:
	        case ECMAScriptParser.Finally:
	        case ECMAScriptParser.Return:
	        case ECMAScriptParser.Void:
	        case ECMAScriptParser.Continue:
	        case ECMAScriptParser.For:
	        case ECMAScriptParser.Switch:
	        case ECMAScriptParser.While:
	        case ECMAScriptParser.Debugger:
	        case ECMAScriptParser.Function:
	        case ECMAScriptParser.This:
	        case ECMAScriptParser.With:
	        case ECMAScriptParser.Default:
	        case ECMAScriptParser.If:
	        case ECMAScriptParser.Throw:
	        case ECMAScriptParser.Delete:
	        case ECMAScriptParser.In:
	        case ECMAScriptParser.Try:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 598;
	            this.keyword();
	            break;
	        case ECMAScriptParser.Class:
	        case ECMAScriptParser.Enum:
	        case ECMAScriptParser.Extends:
	        case ECMAScriptParser.Super:
	        case ECMAScriptParser.Const:
	        case ECMAScriptParser.Export:
	        case ECMAScriptParser.Import:
	        case ECMAScriptParser.Implements:
	        case ECMAScriptParser.Let:
	        case ECMAScriptParser.Private:
	        case ECMAScriptParser.Public:
	        case ECMAScriptParser.Interface:
	        case ECMAScriptParser.Package:
	        case ECMAScriptParser.Protected:
	        case ECMAScriptParser.Static:
	        case ECMAScriptParser.Yield:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 599;
	            this.futureReservedWord();
	            break;
	        case ECMAScriptParser.NullLiteral:
	        case ECMAScriptParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 600;
	            _la = this._input.LA(1);
	            if(!(_la===ECMAScriptParser.NullLiteral || _la===ECMAScriptParser.BooleanLiteral)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ECMAScriptParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 603;
	        _la = this._input.LA(1);
	        if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (ECMAScriptParser.Break - 56)) | (1 << (ECMAScriptParser.Do - 56)) | (1 << (ECMAScriptParser.Instanceof - 56)) | (1 << (ECMAScriptParser.Typeof - 56)) | (1 << (ECMAScriptParser.Case - 56)) | (1 << (ECMAScriptParser.Else - 56)) | (1 << (ECMAScriptParser.New - 56)) | (1 << (ECMAScriptParser.Var - 56)) | (1 << (ECMAScriptParser.Catch - 56)) | (1 << (ECMAScriptParser.Finally - 56)) | (1 << (ECMAScriptParser.Return - 56)) | (1 << (ECMAScriptParser.Void - 56)) | (1 << (ECMAScriptParser.Continue - 56)) | (1 << (ECMAScriptParser.For - 56)) | (1 << (ECMAScriptParser.Switch - 56)) | (1 << (ECMAScriptParser.While - 56)) | (1 << (ECMAScriptParser.Debugger - 56)) | (1 << (ECMAScriptParser.Function - 56)) | (1 << (ECMAScriptParser.This - 56)) | (1 << (ECMAScriptParser.With - 56)) | (1 << (ECMAScriptParser.Default - 56)) | (1 << (ECMAScriptParser.If - 56)) | (1 << (ECMAScriptParser.Throw - 56)) | (1 << (ECMAScriptParser.Delete - 56)) | (1 << (ECMAScriptParser.In - 56)) | (1 << (ECMAScriptParser.Try - 56)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	futureReservedWord() {
	    let localctx = new FutureReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ECMAScriptParser.RULE_futureReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        _la = this._input.LA(1);
	        if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (ECMAScriptParser.Class - 83)) | (1 << (ECMAScriptParser.Enum - 83)) | (1 << (ECMAScriptParser.Extends - 83)) | (1 << (ECMAScriptParser.Super - 83)) | (1 << (ECMAScriptParser.Const - 83)) | (1 << (ECMAScriptParser.Export - 83)) | (1 << (ECMAScriptParser.Import - 83)) | (1 << (ECMAScriptParser.Implements - 83)) | (1 << (ECMAScriptParser.Let - 83)) | (1 << (ECMAScriptParser.Private - 83)) | (1 << (ECMAScriptParser.Public - 83)) | (1 << (ECMAScriptParser.Interface - 83)) | (1 << (ECMAScriptParser.Package - 83)) | (1 << (ECMAScriptParser.Protected - 83)) | (1 << (ECMAScriptParser.Static - 83)) | (1 << (ECMAScriptParser.Yield - 83)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ECMAScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        if (!( this._input.LT(1).text.startsWith("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).text.startsWith(\"get\")");
	        }
	        this.state = 608;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 609;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ECMAScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        if (!( this._input.LT(1).text.startsWith("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).text.startsWith(\"set\")");
	        }
	        this.state = 612;
	        this.match(ECMAScriptParser.Identifier);
	        this.state = 613;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ECMAScriptParser.RULE_eos);
	    try {
	        this.state = 619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 615;
	            this.match(ECMAScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 616;
	            this.match(ECMAScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 617;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 618;
	            if (!( this._input.LT(1).type == ECMAScriptParser.CloseBrace)) {
	                throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).type == ECMAScriptParser.CloseBrace");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eof() {
	    let localctx = new EofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ECMAScriptParser.RULE_eof);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(ECMAScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ECMAScriptParser.EOF = antlr4.Token.EOF;
ECMAScriptParser.RegularExpressionLiteral = 1;
ECMAScriptParser.LineTerminator = 2;
ECMAScriptParser.OpenBracket = 3;
ECMAScriptParser.CloseBracket = 4;
ECMAScriptParser.OpenParen = 5;
ECMAScriptParser.CloseParen = 6;
ECMAScriptParser.OpenBrace = 7;
ECMAScriptParser.CloseBrace = 8;
ECMAScriptParser.SemiColon = 9;
ECMAScriptParser.Comma = 10;
ECMAScriptParser.Assign = 11;
ECMAScriptParser.QuestionMark = 12;
ECMAScriptParser.Colon = 13;
ECMAScriptParser.Dot = 14;
ECMAScriptParser.PlusPlus = 15;
ECMAScriptParser.MinusMinus = 16;
ECMAScriptParser.Plus = 17;
ECMAScriptParser.Minus = 18;
ECMAScriptParser.BitNot = 19;
ECMAScriptParser.Not = 20;
ECMAScriptParser.Multiply = 21;
ECMAScriptParser.Divide = 22;
ECMAScriptParser.Modulus = 23;
ECMAScriptParser.RightShiftArithmetic = 24;
ECMAScriptParser.LeftShiftArithmetic = 25;
ECMAScriptParser.RightShiftLogical = 26;
ECMAScriptParser.LessThan = 27;
ECMAScriptParser.MoreThan = 28;
ECMAScriptParser.LessThanEquals = 29;
ECMAScriptParser.GreaterThanEquals = 30;
ECMAScriptParser.Equals = 31;
ECMAScriptParser.NotEquals = 32;
ECMAScriptParser.IdentityEquals = 33;
ECMAScriptParser.IdentityNotEquals = 34;
ECMAScriptParser.BitAnd = 35;
ECMAScriptParser.BitXOr = 36;
ECMAScriptParser.BitOr = 37;
ECMAScriptParser.And = 38;
ECMAScriptParser.Or = 39;
ECMAScriptParser.MultiplyAssign = 40;
ECMAScriptParser.DivideAssign = 41;
ECMAScriptParser.ModulusAssign = 42;
ECMAScriptParser.PlusAssign = 43;
ECMAScriptParser.MinusAssign = 44;
ECMAScriptParser.LeftShiftArithmeticAssign = 45;
ECMAScriptParser.RightShiftArithmeticAssign = 46;
ECMAScriptParser.RightShiftLogicalAssign = 47;
ECMAScriptParser.BitAndAssign = 48;
ECMAScriptParser.BitXorAssign = 49;
ECMAScriptParser.BitOrAssign = 50;
ECMAScriptParser.NullLiteral = 51;
ECMAScriptParser.BooleanLiteral = 52;
ECMAScriptParser.DecimalLiteral = 53;
ECMAScriptParser.HexIntegerLiteral = 54;
ECMAScriptParser.OctalIntegerLiteral = 55;
ECMAScriptParser.Break = 56;
ECMAScriptParser.Do = 57;
ECMAScriptParser.Instanceof = 58;
ECMAScriptParser.Typeof = 59;
ECMAScriptParser.Case = 60;
ECMAScriptParser.Else = 61;
ECMAScriptParser.New = 62;
ECMAScriptParser.Var = 63;
ECMAScriptParser.Catch = 64;
ECMAScriptParser.Finally = 65;
ECMAScriptParser.Return = 66;
ECMAScriptParser.Void = 67;
ECMAScriptParser.Continue = 68;
ECMAScriptParser.For = 69;
ECMAScriptParser.Switch = 70;
ECMAScriptParser.While = 71;
ECMAScriptParser.Debugger = 72;
ECMAScriptParser.Function = 73;
ECMAScriptParser.This = 74;
ECMAScriptParser.With = 75;
ECMAScriptParser.Default = 76;
ECMAScriptParser.If = 77;
ECMAScriptParser.Throw = 78;
ECMAScriptParser.Delete = 79;
ECMAScriptParser.In = 80;
ECMAScriptParser.Try = 81;
ECMAScriptParser.Number = 82;
ECMAScriptParser.Class = 83;
ECMAScriptParser.Enum = 84;
ECMAScriptParser.Extends = 85;
ECMAScriptParser.Super = 86;
ECMAScriptParser.Const = 87;
ECMAScriptParser.Export = 88;
ECMAScriptParser.Import = 89;
ECMAScriptParser.Implements = 90;
ECMAScriptParser.Let = 91;
ECMAScriptParser.Private = 92;
ECMAScriptParser.Public = 93;
ECMAScriptParser.Interface = 94;
ECMAScriptParser.Package = 95;
ECMAScriptParser.Protected = 96;
ECMAScriptParser.Static = 97;
ECMAScriptParser.Yield = 98;
ECMAScriptParser.Identifier = 99;
ECMAScriptParser.StringLiteral = 100;
ECMAScriptParser.WhiteSpaces = 101;
ECMAScriptParser.MultiLineComment = 102;
ECMAScriptParser.SingleLineComment = 103;
ECMAScriptParser.UnexpectedCharacter = 104;

ECMAScriptParser.RULE_program = 0;
ECMAScriptParser.RULE_sourceElements = 1;
ECMAScriptParser.RULE_sourceElement = 2;
ECMAScriptParser.RULE_statement = 3;
ECMAScriptParser.RULE_block = 4;
ECMAScriptParser.RULE_statementList = 5;
ECMAScriptParser.RULE_variableStatement = 6;
ECMAScriptParser.RULE_variableDeclarationList = 7;
ECMAScriptParser.RULE_variableDeclaration = 8;
ECMAScriptParser.RULE_initialiser = 9;
ECMAScriptParser.RULE_emptyStatement = 10;
ECMAScriptParser.RULE_expressionStatement = 11;
ECMAScriptParser.RULE_ifStatement = 12;
ECMAScriptParser.RULE_iterationStatement = 13;
ECMAScriptParser.RULE_continueStatement = 14;
ECMAScriptParser.RULE_breakStatement = 15;
ECMAScriptParser.RULE_returnStatement = 16;
ECMAScriptParser.RULE_withStatement = 17;
ECMAScriptParser.RULE_switchStatement = 18;
ECMAScriptParser.RULE_caseBlock = 19;
ECMAScriptParser.RULE_caseClauses = 20;
ECMAScriptParser.RULE_caseClause = 21;
ECMAScriptParser.RULE_defaultClause = 22;
ECMAScriptParser.RULE_labelledStatement = 23;
ECMAScriptParser.RULE_throwStatement = 24;
ECMAScriptParser.RULE_tryStatement = 25;
ECMAScriptParser.RULE_catchProduction = 26;
ECMAScriptParser.RULE_finallyProduction = 27;
ECMAScriptParser.RULE_debuggerStatement = 28;
ECMAScriptParser.RULE_functionDeclaration = 29;
ECMAScriptParser.RULE_formalParameterList = 30;
ECMAScriptParser.RULE_functionBody = 31;
ECMAScriptParser.RULE_arrayLiteral = 32;
ECMAScriptParser.RULE_elementList = 33;
ECMAScriptParser.RULE_elision = 34;
ECMAScriptParser.RULE_objectLiteral = 35;
ECMAScriptParser.RULE_propertyNameAndValueList = 36;
ECMAScriptParser.RULE_propertyAssignment = 37;
ECMAScriptParser.RULE_propertyName = 38;
ECMAScriptParser.RULE_propertySetParameterList = 39;
ECMAScriptParser.RULE_arguments = 40;
ECMAScriptParser.RULE_argumentList = 41;
ECMAScriptParser.RULE_expressionSequence = 42;
ECMAScriptParser.RULE_singleExpression = 43;
ECMAScriptParser.RULE_assignmentOperator = 44;
ECMAScriptParser.RULE_literal = 45;
ECMAScriptParser.RULE_numericLiteral = 46;
ECMAScriptParser.RULE_identifierName = 47;
ECMAScriptParser.RULE_reservedWord = 48;
ECMAScriptParser.RULE_keyword = 49;
ECMAScriptParser.RULE_futureReservedWord = 50;
ECMAScriptParser.RULE_getter = 51;
ECMAScriptParser.RULE_setter = 52;
ECMAScriptParser.RULE_eos = 53;
ECMAScriptParser.RULE_eof = 54;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(ECMAScriptParser.EOF, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterSourceElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitSourceElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitSourceElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitSourceElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_variableStatement;
    }

	Var() {
	    return this.getToken(ECMAScriptParser.Var, 0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitVariableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitVariableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList;
    }

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_variableDeclaration;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	initialiser() {
	    return this.getTypedRuleContext(InitialiserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitialiserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_initialiser;
    }

	Assign() {
	    return this.getToken(ECMAScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterInitialiser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitInitialiser(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitInitialiser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_emptyStatement;
    }

	SemiColon() {
	    return this.getToken(ECMAScriptParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitEmptyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(ECMAScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(ECMAScriptParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(ECMAScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(ECMAScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.DoStatementContext = DoStatementContext;

class ForVarStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(ECMAScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	Var() {
	    return this.getToken(ECMAScriptParser.Var, 0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.SemiColon);
	    } else {
	        return this.getToken(ECMAScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterForVarStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitForVarStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitForVarStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ForVarStatementContext = ForVarStatementContext;

class ForVarInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(ECMAScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	Var() {
	    return this.getToken(ECMAScriptParser.Var, 0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(ECMAScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterForVarInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitForVarInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitForVarInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ForVarInStatementContext = ForVarInStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(ECMAScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(ECMAScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.SemiColon);
	    } else {
	        return this.getToken(ECMAScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(ECMAScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	In() {
	    return this.getToken(ECMAScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitForInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ForInStatementContext = ForInStatementContext;

class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(ECMAScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(ECMAScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(ECMAScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(ECMAScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(ECMAScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitCaseBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitCaseClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(ECMAScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(ECMAScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(ECMAScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(ECMAScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitDefaultClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_labelledStatement;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(ECMAScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitLabelledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(ECMAScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(ECMAScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(ECMAScriptParser.Catch, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitCatchProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(ECMAScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFinallyProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(ECMAScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_functionDeclaration;
    }

	Function() {
	    return this.getToken(ECMAScriptParser.Function, 0);
	};

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_formalParameterList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Identifier);
	    } else {
	        return this.getToken(ECMAScriptParser.Identifier, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_functionBody;
    }

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(ECMAScriptParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(ECMAScriptParser.CloseBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	Comma() {
	    return this.getToken(ECMAScriptParser.Comma, 0);
	};

	elision() {
	    return this.getTypedRuleContext(ElisionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_elementList;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	elision = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElisionContext);
	    } else {
	        return this.getTypedRuleContext(ElisionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_elision;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterElision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitElision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitElision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	propertyNameAndValueList() {
	    return this.getTypedRuleContext(PropertyNameAndValueListContext,0);
	};

	Comma() {
	    return this.getToken(ECMAScriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitObjectLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyNameAndValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_propertyNameAndValueList;
    }

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertyNameAndValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertyNameAndValueList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertyNameAndValueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(ECMAScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	propertySetParameterList() {
	    return this.getTypedRuleContext(PropertySetParameterListContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertySetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertyGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PropertyGetterContext = PropertyGetterContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(ECMAScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertySetParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_propertySetParameterList;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPropertySetParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPropertySetParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPropertySetParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_argumentList;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECMAScriptParser.Comma);
	    } else {
	        return this.getToken(ECMAScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(ECMAScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(ECMAScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(ECMAScriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(ECMAScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterObjectLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitObjectLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitObjectLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(ECMAScriptParser.In, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(ECMAScriptParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(ECMAScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(ECMAScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPreDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPreDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterArgumentsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitArgumentsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(ECMAScriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitThisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function() {
	    return this.getToken(ECMAScriptParser.Function, 0);
	};

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(ECMAScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(ECMAScriptParser.CloseBrace, 0);
	};

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(ECMAScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterUnaryMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitUnaryMinusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(ECMAScriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPostDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPostDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Assign() {
	    return this.getToken(ECMAScriptParser.Assign, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(ECMAScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(ECMAScriptParser.Instanceof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterInstanceofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitInstanceofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitInstanceofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(ECMAScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterUnaryPlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitUnaryPlusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitUnaryPlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(ECMAScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitDeleteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals() {
	    return this.getToken(ECMAScriptParser.Equals, 0);
	};

	NotEquals() {
	    return this.getToken(ECMAScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(ECMAScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(ECMAScriptParser.IdentityNotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(ECMAScriptParser.BitXOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBitXOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBitXOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(ECMAScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(ECMAScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(ECMAScriptParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(ECMAScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(ECMAScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(ECMAScriptParser.RightShiftLogical, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(ECMAScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(ECMAScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(ECMAScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(ECMAScriptParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(ECMAScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(ECMAScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(ECMAScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(ECMAScriptParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(ECMAScriptParser.PlusPlus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(ECMAScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBitNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(ECMAScriptParser.New, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(ECMAScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class NumberExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Number() {
	    return this.getToken(ECMAScriptParser.Number, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterNumberExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitNumberExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitNumberExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.NumberExpressionContext = NumberExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(ECMAScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(ECMAScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterMemberIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitMemberIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(ECMAScriptParser.BitAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBitAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(ECMAScriptParser.BitOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterBitOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitBitOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterAssignmentOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitAssignmentOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitAssignmentOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(ECMAScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterVoidExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitVoidExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitVoidExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ECMAScriptParser.VoidExpressionContext = VoidExpressionContext;

class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(ECMAScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(ECMAScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(ECMAScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(ECMAScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(ECMAScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(ECMAScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(ECMAScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(ECMAScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(ECMAScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(ECMAScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(ECMAScriptParser.BitOrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(ECMAScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(ECMAScriptParser.StringLiteral, 0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(ECMAScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(ECMAScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(ECMAScriptParser.OctalIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_identifierName;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitIdentifierName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	futureReservedWord() {
	    return this.getTypedRuleContext(FutureReservedWordContext,0);
	};

	NullLiteral() {
	    return this.getToken(ECMAScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(ECMAScriptParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(ECMAScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(ECMAScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(ECMAScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(ECMAScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(ECMAScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(ECMAScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(ECMAScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(ECMAScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(ECMAScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(ECMAScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(ECMAScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(ECMAScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(ECMAScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(ECMAScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(ECMAScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(ECMAScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(ECMAScriptParser.Debugger, 0);
	};

	Function() {
	    return this.getToken(ECMAScriptParser.Function, 0);
	};

	This() {
	    return this.getToken(ECMAScriptParser.This, 0);
	};

	With() {
	    return this.getToken(ECMAScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(ECMAScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(ECMAScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(ECMAScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(ECMAScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(ECMAScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(ECMAScriptParser.Try, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FutureReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_futureReservedWord;
    }

	Class() {
	    return this.getToken(ECMAScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(ECMAScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(ECMAScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(ECMAScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(ECMAScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(ECMAScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(ECMAScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(ECMAScriptParser.Implements, 0);
	};

	Let() {
	    return this.getToken(ECMAScriptParser.Let, 0);
	};

	Private() {
	    return this.getToken(ECMAScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(ECMAScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(ECMAScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(ECMAScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(ECMAScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(ECMAScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(ECMAScriptParser.Yield, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterFutureReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitFutureReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitFutureReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_getter;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_setter;
    }

	Identifier() {
	    return this.getToken(ECMAScriptParser.Identifier, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitSetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(ECMAScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(ECMAScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECMAScriptParser.RULE_eof;
    }

	EOF() {
	    return this.getToken(ECMAScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.enterEof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECMAScriptListener ) {
	        listener.exitEof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECMAScriptVisitor ) {
	        return visitor.visitEof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




ECMAScriptParser.ProgramContext = ProgramContext; 
ECMAScriptParser.SourceElementsContext = SourceElementsContext; 
ECMAScriptParser.SourceElementContext = SourceElementContext; 
ECMAScriptParser.StatementContext = StatementContext; 
ECMAScriptParser.BlockContext = BlockContext; 
ECMAScriptParser.StatementListContext = StatementListContext; 
ECMAScriptParser.VariableStatementContext = VariableStatementContext; 
ECMAScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
ECMAScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
ECMAScriptParser.InitialiserContext = InitialiserContext; 
ECMAScriptParser.EmptyStatementContext = EmptyStatementContext; 
ECMAScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
ECMAScriptParser.IfStatementContext = IfStatementContext; 
ECMAScriptParser.IterationStatementContext = IterationStatementContext; 
ECMAScriptParser.ContinueStatementContext = ContinueStatementContext; 
ECMAScriptParser.BreakStatementContext = BreakStatementContext; 
ECMAScriptParser.ReturnStatementContext = ReturnStatementContext; 
ECMAScriptParser.WithStatementContext = WithStatementContext; 
ECMAScriptParser.SwitchStatementContext = SwitchStatementContext; 
ECMAScriptParser.CaseBlockContext = CaseBlockContext; 
ECMAScriptParser.CaseClausesContext = CaseClausesContext; 
ECMAScriptParser.CaseClauseContext = CaseClauseContext; 
ECMAScriptParser.DefaultClauseContext = DefaultClauseContext; 
ECMAScriptParser.LabelledStatementContext = LabelledStatementContext; 
ECMAScriptParser.ThrowStatementContext = ThrowStatementContext; 
ECMAScriptParser.TryStatementContext = TryStatementContext; 
ECMAScriptParser.CatchProductionContext = CatchProductionContext; 
ECMAScriptParser.FinallyProductionContext = FinallyProductionContext; 
ECMAScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
ECMAScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
ECMAScriptParser.FormalParameterListContext = FormalParameterListContext; 
ECMAScriptParser.FunctionBodyContext = FunctionBodyContext; 
ECMAScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
ECMAScriptParser.ElementListContext = ElementListContext; 
ECMAScriptParser.ElisionContext = ElisionContext; 
ECMAScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
ECMAScriptParser.PropertyNameAndValueListContext = PropertyNameAndValueListContext; 
ECMAScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
ECMAScriptParser.PropertyNameContext = PropertyNameContext; 
ECMAScriptParser.PropertySetParameterListContext = PropertySetParameterListContext; 
ECMAScriptParser.ArgumentsContext = ArgumentsContext; 
ECMAScriptParser.ArgumentListContext = ArgumentListContext; 
ECMAScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
ECMAScriptParser.SingleExpressionContext = SingleExpressionContext; 
ECMAScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
ECMAScriptParser.LiteralContext = LiteralContext; 
ECMAScriptParser.NumericLiteralContext = NumericLiteralContext; 
ECMAScriptParser.IdentifierNameContext = IdentifierNameContext; 
ECMAScriptParser.ReservedWordContext = ReservedWordContext; 
ECMAScriptParser.KeywordContext = KeywordContext; 
ECMAScriptParser.FutureReservedWordContext = FutureReservedWordContext; 
ECMAScriptParser.GetterContext = GetterContext; 
ECMAScriptParser.SetterContext = SetterContext; 
ECMAScriptParser.EosContext = EosContext; 
ECMAScriptParser.EofContext = EofContext; 
